#ifndef _EDGE_THREAD_H_
#define _EDGE_THREAD_H_

#include <edge.h>

/** Thread with no affinity has affinity level of -1 */
#define IOT_THREAD_NO_AFFINITY -1
/** Thread with no priority has priority level of -1 */
#define IOT_THREAD_NO_PRIORITY -1

/** Alias for thread function pointer */
typedef void *(*thread_fn_t) (void *arg);

/**
 * @brief Create new thread
 *
 * @param tid      Thread ID
 * @param func     Start the routine to which 'func' points
 * @param arg      The routine started is passed 'arg'
 * @param priority Priority of thread
 * @param affinity Affinity of thread
 * @param logger   Logger, can be NULL
 * @return         'true' if thread created successfully, 'false' if not
 */
extern bool thread_create(pthread_t * tid, thread_fn_t func, void *arg, int priority, int affinity);

/**
 * @brief Get current threads priority
 *
 * @return Current threads priority level
 */
extern int thread_current_get_priority(void);

/**
 * @brief Set priority of current thread
 *
 * @param priority Priority level we wish to assign to current thread
 * @return         'true' if priority set, 'false' if not
 */
extern bool thread_current_set_priority(int priority);

/**
 * @brief Get priority of specified thread
 *
 * @param thread Specified thread
 * @return       Priority level of specified thread
 */
extern int thread_get_priority(pthread_t thread);

/**
 * @brief Set priority of specified thread
 *
 * @param thread   Specified thread
 * @param priority Priority level we wish to assign to specified thread
 * @return         'true' if priority set, 'false' if not
 */
extern bool thread_set_priority(pthread_t thread, int priority);

/**
 * @brief Check if a threads priority level is valid
 *
 * @param priority Priority level to check
 * @return         'true' if valid, 'false' if not
 */
extern bool thread_priority_valid(int priority);

#endif
