/* thread operation
 * writen by xuzhou
 */
#include <thread.h>


bool thread_priority_valid(int priority)
{
    static int max_priority = -2;
    static int min_priority = -2;

    if (max_priority == -2) {
        max_priority = sched_get_priority_max(SCHED_FIFO);
        min_priority = sched_get_priority_min(SCHED_FIFO);
    }
    return (priority >= min_priority && priority <= max_priority);
}

bool thread_create(pthread_t * tid, thread_fn_t func, void *arg, int priority, int affinity)
{
    int ret;
    pthread_t id;
    pthread_attr_t attr;

    if (tid == NULL)
        tid = &id;

    pthread_attr_init(&attr);
    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
    pthread_attr_setinheritsched(&attr, PTHREAD_EXPLICIT_SCHED);

#ifdef EDGE_HAS_CPU_AFFINITY
    if (affinity > -1 && affinity < sysconf(_SC_NPROCESSORS_ONLN)) {
        cpu_set_t cpus;
        CPU_ZERO(&cpus);
        CPU_SET(affinity, &cpus);
        ret = pthread_attr_setaffinity_np(&attr, sizeof (cpu_set_t), &cpus);
        if (ret != 0)
            log_warn("pthread_attr_setaffinity_np failed ret: %d", ret);
    }
#endif

    // No guarantee that can set RT policies in container
    if (thread_priority_valid(priority) && (geteuid() == 0)) {
        struct sched_param param;
        param.sched_priority = priority;
        /* If priority set, also set FIFO scheduling */

        ret = pthread_attr_setschedpolicy(&attr, SCHED_FIFO);
        if (ret != 0)
            log_warn("pthread_attr_setschedpolicy failed ret: %d", ret);
        ret = pthread_attr_setschedparam(&attr, &param);
        if (ret != 0)
            log_warn("pthread_attr_setschedparam failed ret: %d", ret);
    }

    ret = pthread_create(tid, &attr, func, arg);
    if (ret != 0) {
        ret = pthread_create(tid, NULL, func, arg);
        if (ret != 0)
            log_err("pthread_create failed ret: %d", ret);
    }
    pthread_attr_destroy(&attr);

    return ret == 0;
}

int thread_get_priority(pthread_t thread)
{
    int policy;
    struct sched_param param;

    pthread_getschedparam(thread, &policy, &param);

    return param.sched_priority;
}

int thread_current_get_priority(void)
{
    return thread_get_priority(pthread_self());
}

bool thread_set_priority(pthread_t thread, int priority)
{
    struct sched_param param = { .sched_priority = priority };
    return (pthread_setschedparam(thread, SCHED_FIFO, &param) == 0);
}

bool thread_current_set_priority(int priority)
{
    return thread_set_priority(pthread_self(), priority);
}
